# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a1 <- brm(ssim_exp_scale ~ s(stage) + comparison_type, data = df, family = "zero_one_inflated_beta")
library('brms')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a1 <- brm(ssim_exp_scale ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = "zero_one_inflated_beta")
library('brms')
library('lmerTest')
install.packages('lmerTest', type = 'binary')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a1 <- brm(ssim_exp_scale ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = "zero_one_inflated_beta")
summary(a1)
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a1 <- brm(ssim_exp_scale ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = "zero_one_inflated_beta")
summary(a1)
msms <- marginal_smooths(a1)
msms <- conditional_smooths(a1)
msms <- conditional_smooths(a1)
msms <- conditional_smooths(a1)
plot(msms)
library(sjstats)
install.packages("sjstats", type = "binary")
library(sjstats)
r2(a1)
library(sjstats)
performance::r2(a1)
library(mgcv)
library(visreg)
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a2 <- gam(ssim_exp ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = betar())
summary(a2)
visreg(b2, xvar = "stage", by = "comparison_type", data = df, method = "REML")
library(mgcv)
library(visreg)
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a2 <- gam(ssim_exp ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = betar())
summary(a2)
visreg(b2, xvar = "stage", by = "comparison_type", data = df, method = "REML")
library(mgcv)
library(visreg)
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a2 <- gam(ssim_exp ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = betar())
summary(a2)
visreg(a2, xvar = "stage", by = "comparison_type", data = df, method = "REML")
library(mgcv)
library(visreg)
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a2 <- gam(ssim_exp ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = gaussian())
summary(a2)
visreg(a2, xvar = "stage", by = "comparison_type", data = df, method = "REML")
library(mgcv)
library(visreg)
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a2 <- gam(ssim_exp ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = betar())
summary(a2)
visreg(a2, xvar = "stage", by = "comparison_type", data = df, method = "REML")
library(mgcv)
library(visreg)
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a2 <- gam(ssim_exp ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = gaussian())
summary(a2)
visreg(a2, xvar = "stage", by = "comparison_type", data = df, method = "REML")
sm1<-sim(a2,1000)
install.packages(c("MCMCglmm", "arm"), dependencies=TRUE)
library(MCMCglmm)
library(arm)
sm1<-sim(a2,1000)
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0 <- lm(ssim_exp_scale ~ comparison_type, data = df)
summary(a0)
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0 <- lm(ssim_exp_scale ~ comparison_type, data = df)
summary(a0)
plot(a0)
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0 <- lm(ssim_exp_scale ~ comparison_type, data = df)
summary(a0)
abine(a0)
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0 <- lm(ssim_exp_scale ~ comparison_type, data = df)
summary(a0)
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0 <- lm(ssim_exp_scale ~ factor(comparison_type), data = df)
summary(a0)
t.test(df$ssim_exp_scale[df$comparison_type == 'functions'], df$ssim_exp_scale[df$comparison_type == 'complete'] )
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0 <- lm(ssim_exp_scale ~ comparison_type + factor(link1_change), data = df)
summary(a0)
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_a <- lm(ssim_exp_scale ~ comparison_type + factor(link1_change), data = df)
summary(a0_a)
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_b <- lm(ssim_exp_scale ~ comparison_type + (1 | link1_change), data = df)
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_b <- lmer(ssim_exp_scale ~ comparison_type + (1 | link1_change), data = df)
summary(a0_b)
ggplot(df, aes(x = comparison_type, ssim_exp_scale)) + facet_wrap(~link1_change)
library(ggplot2)
ggplot(df, aes(x = comparison_type, ssim_exp_scale)) + facet_wrap(~link1_change)
library(ggplot2)
ggplot(df, aes(x = comparison_type, ssim_exp_scale)) + facet_wrap(~link1_change) + geom_jitter(width = 0.1, height = 0.1)
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_b <- lmer(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df)
summary(a0_b)
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_c <- lmer(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df)
summary(a0_c)
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_d <- brm(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df, iter = 1000, prior = NULL)
summary(a0_d)
get_prior(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df)
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_e <- brm(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df, iter = 1000, prior = set_prior( student_t(3, 0, 2.5)), class = "Intercept")
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_e <- brm(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df, iter = 1000, prior = set_prior(" student_t(3, 0, 2.5)"), class = "Intercept")
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_e <- brm(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df, iter = 1000, prior = set_prior(" student_t(3, 0, 2.5)", class = "Intercept")
summary(a0_e)
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_e <- brm(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df, iter = 1000, prior = set_prior(" student_t(3, 0, 2.5)", class = "Intercept"))
summary(a0_e)
library('lme4')
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a0_e <- brm(ssim_exp_scale ~ comparison_type + (comparison_type | link1_change), data = df, iter = 1000, family = zero_one_inflated_beta())
summary(a0_e)
library('brms')
library('lmerTest')
df <- read.csv("final_unal0_functions_complete.csv")
# fit a smooth which varies by comparison_type
df$comparison_type <- factor(df$comparison_type)
# separate smooth functions for each level of the factor
# each has its own smoothness parameter
# centred ( no group means ) so include factor as a fixed effect
a1 <- brm(ssim_exp_scale ~ s(stage, k = 4, fx = TRUE, by = comparison_type) + comparison_type, data = df, family = zero_one_inflated_beta(), iter = 1000)
summary(a1)
msms <- conditional_smooths(a0_e)
msms <- conditional_effects(a1)
plot(msms)
library(mgcv)
library(visreg)
df1 <- read.csv("output/final_functions.csv")
# fit a smooth which varies by comparison_type
df1$type <- factor(df1$type)
b <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df1, family = betar(link="logit"), method = "REML")
summary(b)
#a <- lm(dist_search ~ stage * type, data = df1)
#summary(a)
#visreg(b, yvar = "dist_search", xvar = "stage", ylab= "dist_search",  by = "type", data = df1, method = "REML")
# transform from log-odds to probabilities scale, transform to 0 and 1
plot(b, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df2 <- read.csv("output/functions_data.csv")
# fit a smooth which varies by comparison_type
df2$type <- factor(df2$type)
b <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df2, family = betar(link="logit"), method = "REML")
summary(b)
#a <- lm(dist_search ~ stage * type, data = df1)
#summary(a)
#visreg(b, yvar = "dist_search", xvar = "stage", ylab= "dist_search",  by = "type", data = df1, method = "REML")
# transform from log-odds to probabilities scale, transform to 0 and 1
plot(b, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df3 <- read.csv("output/visual_data.csv")
# fit a smooth which varies by comparison_type
df3$type <- factor(df3$type)
b <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df3, family = betar(link="logit"), method = "REML")
summary(b)
#a <- lm(dist_search ~ stage * type, data = df1)
#summary(a)
#visreg(b, yvar = "dist_search", xvar = "stage", ylab= "dist_search",  by = "type", data = df1, method = "REML")
# transform from log-odds to probabilities scale, transform to 0 and 1
plot(b, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df5 <- read.csv("output/final_visual.csv")
#df2 <- subset(df, df$type != "simple")
# fit a smooth which varies by comparison_type
df5$type <- factor(df5$type)
b2 <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df5, family = betar(link="logit"), method = "REML")
summary(b2)
#visreg(b2, xvar = "stage", by = "type", data = df2, method = "REML")
plot(b2, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b2, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df4 <- read.csv("output/functions_visual_data.csv")
# fit a smooth which varies by comparison_type
df4$type <- factor(df4$type)
b2 <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df4, family = betar(link="logit"), method = "REML")
summary(b2)
#visreg(b2, xvar = "stage", by = "type", data = df2, method = "REML")
plot(b2, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b2, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library('itsadug')
gamtabs(b, caption="Visual Search vs Functions Search")
library('itsadug')
gamtabs(b2, caption="Visual Search of Complete Web Applications, Maps and Charts")
library(modelsummary)
options("modelsummary_format_numeric_latex" = "plain")
models <- list(
"Model 1" =  gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df1, family = betar(link="logit"), method = "REML"),
"Model 2" =  gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df4, family = betar(link="logit"), method = "REML"),
"Model 3" = gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df5, family = betar(link="logit"), method = "REML")
)
modelsummary(models, output = "latex",
estimate = "estimate",
stars = TRUE,
statistic = c("Std.Error" = "std.error",
"t-value" = "statistic"))
library(mgcv)
library(visreg)
df1 <- read.csv("output/final_functions.csv")
# fit a smooth which varies by comparison_type
df1$type <- factor(df1$type)
df1$type[df1$type == "Functions Search"] <- "Function"
b <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df1, family = betar(link="logit"), method = "REML")
library(mgcv)
library(visreg)
df1 <- read.csv("output/final_functions.csv")
# fit a smooth which varies by comparison_type
df1$type[df1$type == "Function Search"] <- "Function"
df1$type <- factor(df1$type)
b <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df1, family = betar(link="logit"), method = "REML")
summary(b)
#a <- lm(dist_search ~ stage * type, data = df1)
#summary(a)
#visreg(b, yvar = "dist_search", xvar = "stage", ylab= "dist_search",  by = "type", data = df1, method = "REML")
# transform from log-odds to probabilities scale, transform to 0 and 1
plot(b, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df1 <- read.csv("output/final_functions.csv")
# fit a smooth which varies by comparison_type
df1$type[df1$type == "Function Search"] <- "Function"
df1$type <- factor(df1$type)
b <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df1, family = betar(link="logit"), method = "REML")
summary(b)
#a <- lm(dist_search ~ stage * type, data = df1)
#summary(a)
#visreg(b, yvar = "dist_search", xvar = "stage", ylab= "dist_search",  by = "type", data = df1, method = "REML")
# transform from log-odds to probabilities scale, transform to 0 and 1
plot(b, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df1 <- read.csv("output/final_functions.csv")
# fit a smooth which varies by comparison_type
df1$type[df1$type == "Functions Search"] <- "Function"
df1$type <- factor(df1$type)
b <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df1, family = betar(link="logit"), method = "REML")
summary(b)
#a <- lm(dist_search ~ stage * type, data = df1)
#summary(a)
#visreg(b, yvar = "dist_search", xvar = "stage", ylab= "dist_search",  by = "type", data = df1, method = "REML")
# transform from log-odds to probabilities scale, transform to 0 and 1
plot(b, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df1 <- read.csv("output/final_functions.csv")
# fit a smooth which varies by comparison_type
df1$type[df1$type == "Functions Search"] <- "Function"
df1$type[df1$type == "Visual Search"] <- "Visual"
df1$type <- factor(df1$type)
b <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df1, family = betar(link="logit"), method = "REML")
summary(b)
#a <- lm(dist_search ~ stage * type, data = df1)
#summary(a)
#visreg(b, yvar = "dist_search", xvar = "stage", ylab= "dist_search",  by = "type", data = df1, method = "REML")
# transform from log-odds to probabilities scale, transform to 0 and 1
plot(b, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df4 <- read.csv("output/functions_visual_data.csv")
df4$type[df4$type == "Functions Search"] <- "Function"
df4$type[df4$type == "Visual Search"] <- "Visual"
df4$type[df4$type == "Data Search"] <- "Data"
# fit a smooth which varies by comparison_type
df4$type <- factor(df4$type)
b2 <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df4, family = betar(link="logit"), method = "REML")
summary(b2)
#visreg(b2, xvar = "stage", by = "type", data = df2, method = "REML")
plot(b2, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b2, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(modelsummary)
options("modelsummary_format_numeric_latex" = "plain")
models <- list(
"Model 1" =  gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df1, family = betar(link="logit"), method = "REML"),
"Model 2" =  gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df4, family = betar(link="logit"), method = "REML"),
"Model 3" = gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df5, family = betar(link="logit"), method = "REML")
)
modelsummary(models, output = "latex",
estimate = "estimate",
stars = TRUE,
statistic = c("Std.Error" = "std.error",
"t-value" = "statistic"))
library('itsadug')
gamtabs(b, caption="Visual Search vs Functions Search")
library('itsadug')
gamtabs(b, caption="Visual Search vs Functions Search")
library('itsadug')
gamtabs(b2, caption="Visual Search of Complete Web Applications, Maps and Charts")
library(mgcv)
library(visreg)
df4 <- read.csv("output/functions_visual_data.csv")
df4$type[df4$type == "Functions Search"] <- "Function"
df4$type[df4$type == "Visual Search"] <- "Visual"
df4$type[df4$type == " Search"] <- "Data"
# fit a smooth which varies by comparison_type
df4$type <- factor(df4$type)
b2 <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df4, family = betar(link="logit"), method = "REML")
summary(b2)
#visreg(b2, xvar = "stage", by = "type", data = df2, method = "REML")
plot(b2, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b2, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library(mgcv)
library(visreg)
df5 <- read.csv("output/final_visual.csv")
#df2 <- subset(df, df$type != "simple")
# fit a smooth which varies by comparison_type
df5$type <- factor(df5$type)
b3 <- gam(dist_search ~ s(stage, k = 4, fx = TRUE, by = type) + type, data = df5, family = betar(link="logit"), method = "REML")
summary(b3)
#visreg(b2, xvar = "stage", by = "type", data = df2, method = "REML")
plot(b3, pages = 1, trans = plogis, shift = coef(b)[1], shade = TRUE, shade.col = "lightgreen", col= "purple")
plot(b3, shade = TRUE, pages = 1, scale = 0, seWithMean = TRUE)
library('itsadug')
gamtabs(b3, caption="Visual Search of Complete Web Applications, Maps and Charts")
